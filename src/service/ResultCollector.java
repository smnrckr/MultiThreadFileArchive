package service;

import model.FileStatistics;

import java.util.concurrent.ConcurrentHashMap;
import java.util.Map;

/**
 * ResultCollector sÄ±nÄ±fÄ±, Ã§oklu thread'ler tarafÄ±ndan elde edilen dosya analiz sonuÃ§larÄ±nÄ±
 * thread-safe ÅŸekilde saklar ve daha sonra toplam sonuÃ§larÄ± yazdÄ±rÄ±r.
 */

public class ResultCollector {

    // TÃ¼m dosya analiz sonuÃ§larÄ±nÄ± thread-safe biÃ§imde saklayan ConcurrentHashMap
    private static final ConcurrentHashMap<String, FileStatistics> results = new ConcurrentHashMap<>();

    /**
     * Her bir dosyanÄ±n analiz sonucunu eÅŸsiz ismiyle birlikte ekler.
     *
     * @param fileName Dosya adÄ± (Ã¶r: "file1.txt")
     * @param stats    Dosyaya ait analiz sonuÃ§larÄ± (satÄ±r ve karakter sayÄ±sÄ±)
     */

    public static void addResult(String fileName, FileStatistics stats) {
        results.put(fileName, stats);
    }


    /**
     * TÃ¼m dosyalarÄ±n analiz sonuÃ§larÄ±nÄ± ekrana yazdÄ±rÄ±r.
     * AynÄ± zamanda toplam satÄ±r ve karakter sayÄ±larÄ±nÄ± hesaplayarak gÃ¶sterir.
     */

    public static void printAllResults() {
        int totalLines = 0;
        int totalChars = 0;

        System.out.println("\nğŸ“„ Dosya Analiz SonuÃ§larÄ±:");

        for (Map.Entry<String, FileStatistics> entry : results.entrySet()) {
            String fileName = entry.getKey();
            FileStatistics stats = entry.getValue();

            // Her dosya iÃ§in ayrÄ± ayrÄ± analiz sonucunu yazdÄ±r
            System.out.println(fileName + " - " + stats.getLineCount() + " satÄ±r / " + stats.getCharacterCount() + " karakter");

            // ToplamlarÄ± hesapla
            totalLines += stats.getLineCount();
            totalChars += stats.getCharacterCount();
        }
        // Toplam analiz sonucunu yazdÄ±r
        System.out.println("\nğŸ§¾ Toplam: " + totalLines + " satÄ±r / " + totalChars + " karakter");
    }
}
